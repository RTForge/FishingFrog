[gd_resource type="ShaderMaterial" load_steps=3 format=3 uid="uid://cklak44ley5a7"]

[ext_resource type="Texture2D" uid="uid://6n51yui6th36" path="res://textures/water.jpg" id="1_00a6j"]

[sub_resource type="Shader" id="Shader_vraeh"]
code = "shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_back, diffuse_lambert, specular_schlick_ggx;

uniform float scale;
uniform float speed;
uniform sampler2D surface;
uniform vec3 tint: source_color;

uniform vec3  border_color : source_color = vec3(1.0);
uniform float border_scale : hint_range(0.0, 5.0, 0.01) = 1.0;
uniform float border_near = 2;
uniform float border_far = 3000.0;

uniform sampler2D DEPTH_TEXTURE : hint_depth_texture, filter_linear_mipmap;


float border(float cur_depth)
{
	return border_near * border_far / (border_far + (2.0 * cur_depth - 1.0) * (border_near - border_far));
}

void vertex() {
}

void fragment() {
	
	float screen_depth_raw = texture(DEPTH_TEXTURE, SCREEN_UV).x;
	float surface_depth = FRAGCOORD.z;
	float border_diff = border(screen_depth_raw) - border(surface_depth);
		
	vec2 uv;
	uv.y = (UV.y + cos(UV.x * 128.0 + (TIME * speed))*0.001) * scale;
    uv.x = (UV.x + cos(UV.y * 128.0 + (TIME * speed))*0.001) * scale;

	vec3 water_color = texture(surface, uv).rgb * tint;
	vec3 final_color = mix(border_color, water_color, step(border_scale, border_diff));
	ALBEDO = final_color;
}
"

[resource]
render_priority = 0
shader = SubResource("Shader_vraeh")
shader_parameter/scale = 16.0
shader_parameter/speed = 1.0
shader_parameter/tint = Color(0.364706, 0.360784, 0.345098, 1)
shader_parameter/border_color = Color(0.364706, 0.360784, 0.345098, 1)
shader_parameter/border_scale = 2.0
shader_parameter/border_near = 2.0
shader_parameter/border_far = 300.0
shader_parameter/surface = ExtResource("1_00a6j")
